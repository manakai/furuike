=head1 NAME

Furuike - A static file Web server

=head1 DESCRIPTION

Furuike is a Web server, which can serve static files on the local
file system.

=head1 URL-TO-FILE MAPPING

The path component of the effective request URL is mapped to a file or
a directory, using the rules described in this section.  The scheme,
authority, and query components of the effective request URL are
ignored.

The server script must be executed with the C<FURUIKE_DOCUMENT_ROOT>
environment variable, whose value is the path to the "document root"
directory in the local file system.  It should be an absolute path.
Anything under the document root directory is considered as part of
the Web server.  No confidental data should be put within that
directory.

Any non-final path segment must match to the regular expression
C<\A~?[A-Za-z0-9_-][A-Za-z0-9_.-]*\z>.  The final path segment must
match to the regular expression or the empty string.  If there is an
invalid path segment in the effective request URL, a 404 or 400
response is returned.

The path component is interpreted as the path to the file or directory
in the document root.  Any non-final path segment must identify a
directory.  The final path segment must identify a file or directory.
If the final path segment is the empty string, it must identify a
directory.  Some file name extensions can be omitted, as described
later.  No symbolic link is followed.  If the specified file or
directory is not found or not of intended type, a 404 response is
returned.

If the final path segment is the empty string and identifies a
directory (e.g. C</path/to/directory/>), the content of a directory
index file, if any, or a simple HTML document representing the list of
the files and the directories in the directory is returned.  A
directory index file is a file that would be selected if the last path
segment were C<index> (e.g. C</path/to/directory/index>).  As the file
name extensions can be omitted, the file name might be
C<index.ja.html>, C<index.svg.gz>, or C<index.txt>.

If the final path segment is not the empty string and identifies a
directory (e.g. C</path/to/directory>), a 301 response redirecting to
the path with a trailing C</> character (e.g. C</path/to/directory/>)
is returned.

If the final path segment is not the empty string and identifies a
file (e.g. C</path/to/file>), the content of the file is returned.

If the file name consists of the following subcomponents in order, all
or some of the extensions with the preceding C<.> character can be
omitted from the path:

  A base name
  Optionally, "." followed by a language extension
  Optionally, "." followed by a MIME type extension
  Optionally, "." followed by a encoding label extension
  Optionally, "." followed by a content-coding extension

If there are multiple candidate files, a file is chosen by following
factors (where MIME type is the most important factor):

  MIME type
  language
  character encoding

If there are still multiple files with same priority, how a file is
selected is unknown.

=head1 MIME TYPES

The MIME type of a file response (i.e. the C<Content-Type:> header
value) is determined by the MIME type extension in the file name of
the response (not the last path segment itself, in case some file name
extensions are omitted in the URL), if any.  There are following
built-in extension-to-MIME-type mapping rules:

  html  text/html
  txt   text/plain
  css   text/css
  js    text/javascript
  json  application/json
  png   image/png
  jpeg  image/jpeg
  gif   image/gif
  ico   image/vnd.microsoft.icon
  xml   text/xml
  svg   image/svg+xml
  xhtml application/xhtml+xml
  pdf   application/pdf
  zip   application/zip

The set of mapping rules can be configured by the C<AddType>
directive.  If no applicable mapping is found, no C<Content-Type:>
header is set.

If the MIME type extension is omitted from the URL and there are
multiple candidate files, a file is selected using the following
priority list (C<text/html> is the most preferred format):

  text/html
  text/plain
  image/png
  image/jpeg
  image/vnd.microsoft.icon
  image/gif
  Any other type (or no type)

For following MIME types, C<charset=utf-8> parameter is set:

  application/json */*+json

For following MIME types, the encoding label determined by the
encoding label extension in the file name of the response, if any, or
the default encoding label, is used as the C<charset> parameter value:

  text/html text/css text/javascript text/xml application/xml */*+xml

There are following built-in extension-to-encoding-label mapping
rules:

  u8   utf-8
  jis  iso-2022-jp
  euc  euc-jp
  sjis shift_jis

The set of mapping rules can be configured by the C<AddCharset>
directive.

The default for the default encoding label is C<utf-8>.  This default
can be configured by the C<AddDefaultCharset> directive.

If the MIME type extension is omitted from the URL and there are
multiple candidate files, utf-8 is preferred to other encodings.

=head1 LANGUAGES

The C<Content-Language:> header value is determined by the language
extension in the file name of the response (not the last path segment
itself, in case some file name extensions are omitted in the URL), if
any.  The language file name extension is two ASCII lowercase letters,
optionally followed by C<-> followed by two ASCII letters
(i.e. C<[a-z]{2}(?:-[a-zA-Z]{2}|)>).

If no language extension is found, no C<Content-Language:> header is
set.

If the language extension is omitted from the URL and there are
multiple candidate files, a file is selected based on the
C<Accept-Language:> header in the HTTP request, if any (i.e. this is a
"content negotiation" feature).

=head1 CONTENT-CODINGS

The C<Content-Encoding:> header value is determined by the
content-coding extension in the file name of the response (not the
last path segment itself, in case some file name extensions are
omitted in the URL), if any.  There is following built-in
extension-to-content-coding mapping rule:

  gz    gzip

The set of mapping rules can be configured by the C<AddEncoding>
directive.  If no applicable content-coding mapping is found, no
C<Content-Encoding:> header is set.

=head1 DIRECTORY CONFIGURATION FILE (.htaccess)

The C<.htaccess> file can be used to describe various response options
applied to a directory (and its contents).  Its format is a very
limited subset of the C<.htaccess> files used in Apache HTTP Server.

When a file is used to construct a response, the C<.htaccess> file in
the all directory to which the file belongs directly or indirectly,
traversed upward until the document root directory, inclusive, if any.
Any C<.htaccess> file for the parent directory of the document root,
for example, is not used.  When a directory list is returned as a
response, the C<.htaccess> file in the directory, as well as ancestor
directories until the document root directory, are used. if any.

The C<.htaccess> files are read and processed to check the response
options in the order of the directory tree hierarchy, starting from
the document root.

For example, for the file C</path/to/root/foo/bar/index.html>, the
following C<.htaccess> files are examined in this order, if the
document root is C</path/to/root>:

  /path/to/root/.htaccess
  /path/to/root/foo/.htaccess
  /path/to/root/foo/bar/.htaccess

In an C<.htaccess> file, any empty line or line starting with C<#>,
optionally preceded by space characters, is ignored.

In an C<.htaccess> file, the C<< <IfModule fileName> >> line, where
I<fileName> is some opaque string, indicates that any following line
should be ignored until C<< </IfModule> >> line is found.

In an C<.htaccess> file, a directive name can be followed by one or
more arguments, as described in later subsection.

Any other line is considered as a parse error.

If one of an applicable C<.htaccess> file has a parse error, any
request to the files in the directory or the directory itself results
in a C<500> response.

=head2 Directives

Following directives are available:

=over 4

=item AddType MIMETYPE .EXT1 .EXT2 ...

Add a set of MIME type extension file name mapping rules.  The first
argument must be an MIME type without parameter (ASCII
case-insensitive).  The other arguments must be file name extensions
(case-sensitive), optionally preceded by a C<.> character.  There must
be two or more arguments.

=item AddEncoding CODING .EXT1 .EXT2 ...

Add a set of content-coding file name extension mapping rules.  The
first argument must be a content-coding (ASCII case-insensitive).  The
other arguments must be file name extensions (case-sensitive),
optionally preceded by a C<.> character.  There must be two or more
arguments.

=item AddLanguage LANG .EXT1 .EXT2 ...

This directive is ignored.  If specified, there must be two or more
arguments.  The first argument must be equal to the other arguments,
when any preceding C<.> character in the other arguments is ignored.

This directive is DEPRECATED.

=item AddCharset ENCODING .EXT1 .EXT2 ...

Add a set of encoding label file name extension mapping rules.  The
first argument must be an encoding label (ASCII case-insensitive).
The other arguments must be file name extensions (case-sensitive),
optionally preceded by a C<.> character.  There must be two or more
arguments.

This directive is DEPRECATED.  You should always use UTF-8.

=item AddDefaultCharset ENCODING

Set the default encoding label, which is used as the default value for
the C<charset> parameter.

This directive is DEPRECATED.  You should always use UTF-8.

=back

=head1 DEPENDENCY

Perl 5.14 or later is required.

This is a PSGI application.  It requires a PSGI-compliant server.  It
should be an L<AnyEvent>-compatible server, such as L<Twiggy>.

It requires various submodules.  It also requires L<AnyEvent>,
L<IO::AIO>, and L<Path::Tiny>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2015 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
